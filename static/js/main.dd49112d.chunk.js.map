{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api/api.js","App.jsx","index.js"],"names":["TodoList","state","searchTodoByTitle","searchTodoByCompleteness","this","props","todos","onSelectUser","selectedUserId","sortedTodos","filter","todo","title","toLowerCase","includes","completed","className","type","name","autoComplete","onChange","event","setState","target","value","map","key","id","cn","checked","readOnly","userId","onClick","React","Component","defaultProps","PropTypes","arrayOf","shape","CurrentUser","email","phone","clear","getTodos","fetch","then","response","json","getUser","App","selectedUser","clearUser","componentDidMount","a","data","componentDidUpdate","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd49112d.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    searchTodoByTitle: '',\n    searchTodoByCompleteness: 'all',\n  };\n\n  render() {\n    const { todos, onSelectUser, selectedUserId } = this.props;\n    const { searchTodoByTitle, searchTodoByCompleteness } = this.state;\n\n    let sortedTodos = todos.filter((todo) => {\n      if (!searchTodoByTitle) {\n        return todo;\n      }\n\n      if (todo.title !== null) {\n        return todo.title.toLowerCase()\n          .includes(searchTodoByTitle.toLowerCase());\n      }\n\n      if (searchTodoByCompleteness === 'active') {\n        return !todo.completed;\n      }\n\n      if (searchTodoByCompleteness === 'completed') {\n        return todo.completed;\n      }\n\n      return null;\n    });\n\n    sortedTodos = sortedTodos.filter((todo) => {\n      if (searchTodoByCompleteness === 'active') {\n        return !todo.completed;\n      }\n\n      if (searchTodoByCompleteness === 'completed') {\n        return todo.completed;\n      }\n\n      return todo;\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <section className=\"TodoList__filters\">\n          <input\n            className=\"TodoList__find\"\n            type=\"text\"\n            name=\"search\"\n            autoComplete=\"off\"\n            onChange={event => this.setState({\n              searchTodoByTitle: event.target.value,\n            })}\n          />\n\n          <select\n            className=\"TodoList__select\"\n            value={searchTodoByCompleteness}\n            onChange={event => this.setState({\n              searchTodoByCompleteness: event.target.value,\n            })}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </section>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {sortedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={cn('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={cn('TodoList__user-button', 'button', {\n                    'TodoList__user-button--selected':\n                    selectedUserId === todo.userId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelectUser(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      userId: PropTypes.number,\n      completed: PropTypes.bool,\n    }),\n  ),\n  onSelectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number,\n};\n\nTodoList.defaultProps = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: '',\n      userId: '',\n      completed: null,\n    }),\n  ),\n  selectedUserId: 0,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const CurrentUser = ({\n  id,\n  name,\n  email,\n  phone,\n  clear,\n}) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:\n        { }\n        {id}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">\n      {name}\n    </h3>\n\n    <p className=\"CurrentUser__email\">\n      {email}\n    </p>\n\n    <p className=\"CurrentUser__phone\">\n      {phone}\n    </p>\n    <button\n      type=\"button\"\n      className=\"CurrentUser__button button\"\n      onClick={clear}\n    >\n      Clear\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  email: PropTypes.string,\n  phone: PropTypes.string,\n  clear: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  id: 0,\n  name: '',\n  email: '',\n  phone: '',\n};\n","const API_TODOS = `https://mate-api.herokuapp.com/todos`;\n// const USERS = `https://mate-api.herokuapp.com/users/`;\n\nexport const getTodos = () => fetch(API_TODOS)\n  .then(response => response.json());\n\n// eslint-disable-next-line max-len\nexport const getUser = userId => fetch(`https://mate-api.herokuapp.com/users/${userId}`)\n  .then(response => response.json());\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos, getUser } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedUser: [],\n  };\n\n  selectedUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  };\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n      selectedUser: [],\n    });\n  }\n\n  componentDidMount = async() => {\n    const todos = await getTodos();\n\n    this.setState({ todos: todos.data });\n  };\n\n  componentDidUpdate = () => {\n    const { selectedUserId, selectedUser } = this.state;\n\n    if (selectedUserId !== 0\n      && selectedUserId\n      && selectedUserId !== selectedUser.id) {\n      getUser(selectedUserId)\n        .then(user => this.setState({ selectedUser: user.data }));\n    }\n  }\n\n  render() {\n    const { todos, selectedUserId, selectedUser } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onSelectUser={this.selectedUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId && selectedUser ? (\n              <CurrentUser\n                {...selectedUser}\n                clear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}